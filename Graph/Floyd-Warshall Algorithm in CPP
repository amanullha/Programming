/// Floyd-Warshall Algorithm in CPP
#include <bits/stdc++.h>
#define M 100
#define infinity 100000;
using namespace std;
int graph[M][M];
int node,edge;

void printMatrix()
{
    for (int i = 1; i <= node; i++)
    {
        for (int j = 1; j <= node; j++)
        {
            cout<<i<<" ---> "<<j<<"   "<<graph[i][j]<<endl;

        }
    }
}


void floydWarshall()
{
    ///here starting node is 1

    for(int k=1; k<=node; k++)
    {
        for (int i = 1; i <= node; i++)
        {
            for (int j = 1; j <= node; j++)
            {
                if(graph[i][j]>graph[i][k]+graph[k][j])
                {
                    graph[i][j]=graph[i][k]+graph[k][j];
                }
            }
        }
    }

    printMatrix();
}


int main()
{




    // int node,edge;
    cin>>node>>edge;

    for (int i = 0; i < node+2; i++)
    {
        for (int j = 0; j < node+2; j++)
        {
            if(i==j)
                graph[i][j]=0;
            else
                graph[i][j]=infinity;

        }
    }


    while(edge--)
    {
        int from,to,value;
        cin>>from>>to>>value;
        graph[from][to]=value;

    }

    floydWarshall();

    return 0;
}
/**
4
6
1 2 3
2 1 2
2 3 2
3 2 5
4 3 8
4 1 20
**/
