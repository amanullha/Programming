class Solution {
public:
    vector<int> findDuplicates(vector<int>& nums) {
        unordered_map<int ,int>un;
         for(int i=0;i<nums.size();i++)
            {
                if(un.find(nums[i])==un.end())un[nums[i]]=1;
                else un[nums[i]]++;
            }
        vector<int>v;
        for(auto x:un)
        {
            if(x.second>1)v.push_back(x.first);
        }
        sort(v.begin(),v.end());
      return v;  
    }
};
/*
class Solution {
public:
    vector<int> findDuplicates(vector<int>& nums) {
        unordered_map<int ,int>un;
          vector<int>v;
         for(int i=0;i<nums.size();i++)
            {
                if(un.find(nums[i])==un.end())un[nums[i]]=1;
                else v.push_back(nums[i]);
            }
        sort(v.begin(),v.end());
      return v;  
    }
};

*/
/*

class Solution {
public:
    vector<int> findDuplicates(vector<int>& v) {
        if(v.size()==0)return v;
        sort(v.begin(),v.end());
        vector<int>d;
        for(int i=0;i<v.size()-1; )
        {
            if(v[i]==v[i+1]){d.push_back(v[i]);i+=2;}
            else i++;
        }
      return d;  
    }
};


*/
/*
// efficent solution with o(n)runtime and o(1)space
class Solution {
public:
    vector<int> findDuplicates(vector<int>& nums) {
        vector<int>d;
        for(int x:nums)
        {
        int idx=abs(x)-1;// value 1 to n ar moddhe tai value ar thake 1 minus korle index paoya jabe oii value ar
            if(nums[idx]>0)nums[idx]*=-1;// aii value ta eunique
            else d.push_back(abs(x));
            
        }
        
        return d;
    }
};
*/